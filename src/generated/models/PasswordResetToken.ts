
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PasswordResetToken` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetTokenModel = runtime.Types.Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>

export type AggregatePasswordResetToken = {
  _count: PasswordResetTokenCountAggregateOutputType | null
  _min: PasswordResetTokenMinAggregateOutputType | null
  _max: PasswordResetTokenMaxAggregateOutputType | null
}

export type PasswordResetTokenMinAggregateOutputType = {
  id: string | null
  email: string | null
  token: string | null
  expires: Date | null
  createdAt: Date | null
}

export type PasswordResetTokenMaxAggregateOutputType = {
  id: string | null
  email: string | null
  token: string | null
  expires: Date | null
  createdAt: Date | null
}

export type PasswordResetTokenCountAggregateOutputType = {
  id: number
  email: number
  token: number
  expires: number
  createdAt: number
  _all: number
}


export type PasswordResetTokenMinAggregateInputType = {
  id?: true
  email?: true
  token?: true
  expires?: true
  createdAt?: true
}

export type PasswordResetTokenMaxAggregateInputType = {
  id?: true
  email?: true
  token?: true
  expires?: true
  createdAt?: true
}

export type PasswordResetTokenCountAggregateInputType = {
  id?: true
  email?: true
  token?: true
  expires?: true
  createdAt?: true
  _all?: true
}

export type PasswordResetTokenAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PasswordResetToken to aggregate.
   */
  where?: Prisma.PasswordResetTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetTokens to fetch.
   */
  orderBy?: Prisma.PasswordResetTokenOrderByWithRelationInput | Prisma.PasswordResetTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PasswordResetTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PasswordResetTokens
  **/
  _count?: true | PasswordResetTokenCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PasswordResetTokenMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PasswordResetTokenMaxAggregateInputType
}

export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
      [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePasswordResetToken[P]>
    : Prisma.GetScalarType<T[P], AggregatePasswordResetToken[P]>
}




export type PasswordResetTokenGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PasswordResetTokenWhereInput
  orderBy?: Prisma.PasswordResetTokenOrderByWithAggregationInput | Prisma.PasswordResetTokenOrderByWithAggregationInput[]
  by: Prisma.PasswordResetTokenScalarFieldEnum[] | Prisma.PasswordResetTokenScalarFieldEnum
  having?: Prisma.PasswordResetTokenScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PasswordResetTokenCountAggregateInputType | true
  _min?: PasswordResetTokenMinAggregateInputType
  _max?: PasswordResetTokenMaxAggregateInputType
}

export type PasswordResetTokenGroupByOutputType = {
  id: string
  email: string
  token: string
  expires: Date
  createdAt: Date
  _count: PasswordResetTokenCountAggregateOutputType | null
  _min: PasswordResetTokenMinAggregateOutputType | null
  _max: PasswordResetTokenMaxAggregateOutputType | null
}

type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
      }
    >
  >



export type PasswordResetTokenWhereInput = {
  AND?: Prisma.PasswordResetTokenWhereInput | Prisma.PasswordResetTokenWhereInput[]
  OR?: Prisma.PasswordResetTokenWhereInput[]
  NOT?: Prisma.PasswordResetTokenWhereInput | Prisma.PasswordResetTokenWhereInput[]
  id?: Prisma.StringFilter<"PasswordResetToken"> | string
  email?: Prisma.StringFilter<"PasswordResetToken"> | string
  token?: Prisma.StringFilter<"PasswordResetToken"> | string
  expires?: Prisma.DateTimeFilter<"PasswordResetToken"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"PasswordResetToken"> | Date | string
}

export type PasswordResetTokenOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  token?: string
  AND?: Prisma.PasswordResetTokenWhereInput | Prisma.PasswordResetTokenWhereInput[]
  OR?: Prisma.PasswordResetTokenWhereInput[]
  NOT?: Prisma.PasswordResetTokenWhereInput | Prisma.PasswordResetTokenWhereInput[]
  email?: Prisma.StringFilter<"PasswordResetToken"> | string
  expires?: Prisma.DateTimeFilter<"PasswordResetToken"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"PasswordResetToken"> | Date | string
}, "id" | "token">

export type PasswordResetTokenOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.PasswordResetTokenCountOrderByAggregateInput
  _max?: Prisma.PasswordResetTokenMaxOrderByAggregateInput
  _min?: Prisma.PasswordResetTokenMinOrderByAggregateInput
}

export type PasswordResetTokenScalarWhereWithAggregatesInput = {
  AND?: Prisma.PasswordResetTokenScalarWhereWithAggregatesInput | Prisma.PasswordResetTokenScalarWhereWithAggregatesInput[]
  OR?: Prisma.PasswordResetTokenScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PasswordResetTokenScalarWhereWithAggregatesInput | Prisma.PasswordResetTokenScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PasswordResetToken"> | string
  email?: Prisma.StringWithAggregatesFilter<"PasswordResetToken"> | string
  token?: Prisma.StringWithAggregatesFilter<"PasswordResetToken"> | string
  expires?: Prisma.DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
}

export type PasswordResetTokenCreateInput = {
  id?: string
  email: string
  token: string
  expires: Date | string
  createdAt?: Date | string
}

export type PasswordResetTokenUncheckedCreateInput = {
  id?: string
  email: string
  token: string
  expires: Date | string
  createdAt?: Date | string
}

export type PasswordResetTokenUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PasswordResetTokenUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PasswordResetTokenCreateManyInput = {
  id?: string
  email: string
  token: string
  expires: Date | string
  createdAt?: Date | string
}

export type PasswordResetTokenUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PasswordResetTokenUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PasswordResetTokenCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PasswordResetTokenMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PasswordResetTokenMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  token?: Prisma.SortOrder
  expires?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type PasswordResetTokenSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  token?: boolean
  expires?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["passwordResetToken"]>

export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  token?: boolean
  expires?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["passwordResetToken"]>

export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  token?: boolean
  expires?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["passwordResetToken"]>

export type PasswordResetTokenSelectScalar = {
  id?: boolean
  email?: boolean
  token?: boolean
  expires?: boolean
  createdAt?: boolean
}

export type PasswordResetTokenOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "token" | "expires" | "createdAt", ExtArgs["result"]["passwordResetToken"]>

export type $PasswordResetTokenPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PasswordResetToken"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    email: string
    token: string
    expires: Date
    createdAt: Date
  }, ExtArgs["result"]["passwordResetToken"]>
  composites: {}
}

export type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

export type PasswordResetTokenCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PasswordResetTokenCountAggregateInputType | true
  }

export interface PasswordResetTokenDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
  /**
   * Find zero or one PasswordResetToken that matches the filter.
   * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
   * @example
   * // Get one PasswordResetToken
   * const passwordResetToken = await prisma.passwordResetToken.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
   * @example
   * // Get one PasswordResetToken
   * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PasswordResetToken that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
   * @example
   * // Get one PasswordResetToken
   * const passwordResetToken = await prisma.passwordResetToken.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: Prisma.SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PasswordResetToken that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
   * @example
   * // Get one PasswordResetToken
   * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PasswordResetTokens that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PasswordResetTokens
   * const passwordResetTokens = await prisma.passwordResetToken.findMany()
   * 
   * // Get first 10 PasswordResetTokens
   * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PasswordResetTokenFindManyArgs>(args?: Prisma.SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PasswordResetToken.
   * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
   * @example
   * // Create one PasswordResetToken
   * const PasswordResetToken = await prisma.passwordResetToken.create({
   *   data: {
   *     // ... data to create a PasswordResetToken
   *   }
   * })
   * 
   */
  create<T extends PasswordResetTokenCreateArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PasswordResetTokens.
   * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
   * @example
   * // Create many PasswordResetTokens
   * const passwordResetToken = await prisma.passwordResetToken.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PasswordResetTokenCreateManyArgs>(args?: Prisma.SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PasswordResetTokens and returns the data saved in the database.
   * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
   * @example
   * // Create many PasswordResetTokens
   * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PasswordResetTokens and only return the `id`
   * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PasswordResetToken.
   * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
   * @example
   * // Delete one PasswordResetToken
   * const PasswordResetToken = await prisma.passwordResetToken.delete({
   *   where: {
   *     // ... filter to delete one PasswordResetToken
   *   }
   * })
   * 
   */
  delete<T extends PasswordResetTokenDeleteArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PasswordResetToken.
   * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
   * @example
   * // Update one PasswordResetToken
   * const passwordResetToken = await prisma.passwordResetToken.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PasswordResetTokenUpdateArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PasswordResetTokens.
   * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
   * @example
   * // Delete a few PasswordResetTokens
   * const { count } = await prisma.passwordResetToken.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: Prisma.SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PasswordResetTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PasswordResetTokens
   * const passwordResetToken = await prisma.passwordResetToken.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PasswordResetTokens and returns the data updated in the database.
   * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
   * @example
   * // Update many PasswordResetTokens
   * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PasswordResetTokens and only return the `id`
   * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PasswordResetToken.
   * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
   * @example
   * // Update or create a PasswordResetToken
   * const passwordResetToken = await prisma.passwordResetToken.upsert({
   *   create: {
   *     // ... data to create a PasswordResetToken
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PasswordResetToken we want to update
   *   }
   * })
   */
  upsert<T extends PasswordResetTokenUpsertArgs>(args: Prisma.SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma.Prisma__PasswordResetTokenClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PasswordResetTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
   * @example
   * // Count the number of PasswordResetTokens
   * const count = await prisma.passwordResetToken.count({
   *   where: {
   *     // ... the filter for the PasswordResetTokens we want to count
   *   }
   * })
  **/
  count<T extends PasswordResetTokenCountArgs>(
    args?: Prisma.Subset<T, PasswordResetTokenCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PasswordResetToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PasswordResetTokenAggregateArgs>(args: Prisma.Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

  /**
   * Group by PasswordResetToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PasswordResetTokenGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
      : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PasswordResetToken model
 */
readonly fields: PasswordResetTokenFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PasswordResetToken.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PasswordResetToken model
 */
export interface PasswordResetTokenFieldRefs {
  readonly id: Prisma.FieldRef<"PasswordResetToken", 'String'>
  readonly email: Prisma.FieldRef<"PasswordResetToken", 'String'>
  readonly token: Prisma.FieldRef<"PasswordResetToken", 'String'>
  readonly expires: Prisma.FieldRef<"PasswordResetToken", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"PasswordResetToken", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PasswordResetToken findUnique
 */
export type PasswordResetTokenFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * Filter, which PasswordResetToken to fetch.
   */
  where: Prisma.PasswordResetTokenWhereUniqueInput
}

/**
 * PasswordResetToken findUniqueOrThrow
 */
export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * Filter, which PasswordResetToken to fetch.
   */
  where: Prisma.PasswordResetTokenWhereUniqueInput
}

/**
 * PasswordResetToken findFirst
 */
export type PasswordResetTokenFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * Filter, which PasswordResetToken to fetch.
   */
  where?: Prisma.PasswordResetTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetTokens to fetch.
   */
  orderBy?: Prisma.PasswordResetTokenOrderByWithRelationInput | Prisma.PasswordResetTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PasswordResetTokens.
   */
  cursor?: Prisma.PasswordResetTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PasswordResetTokens.
   */
  distinct?: Prisma.PasswordResetTokenScalarFieldEnum | Prisma.PasswordResetTokenScalarFieldEnum[]
}

/**
 * PasswordResetToken findFirstOrThrow
 */
export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * Filter, which PasswordResetToken to fetch.
   */
  where?: Prisma.PasswordResetTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetTokens to fetch.
   */
  orderBy?: Prisma.PasswordResetTokenOrderByWithRelationInput | Prisma.PasswordResetTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PasswordResetTokens.
   */
  cursor?: Prisma.PasswordResetTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PasswordResetTokens.
   */
  distinct?: Prisma.PasswordResetTokenScalarFieldEnum | Prisma.PasswordResetTokenScalarFieldEnum[]
}

/**
 * PasswordResetToken findMany
 */
export type PasswordResetTokenFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * Filter, which PasswordResetTokens to fetch.
   */
  where?: Prisma.PasswordResetTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetTokens to fetch.
   */
  orderBy?: Prisma.PasswordResetTokenOrderByWithRelationInput | Prisma.PasswordResetTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PasswordResetTokens.
   */
  cursor?: Prisma.PasswordResetTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetTokens.
   */
  skip?: number
  distinct?: Prisma.PasswordResetTokenScalarFieldEnum | Prisma.PasswordResetTokenScalarFieldEnum[]
}

/**
 * PasswordResetToken create
 */
export type PasswordResetTokenCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * The data needed to create a PasswordResetToken.
   */
  data: Prisma.XOR<Prisma.PasswordResetTokenCreateInput, Prisma.PasswordResetTokenUncheckedCreateInput>
}

/**
 * PasswordResetToken createMany
 */
export type PasswordResetTokenCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PasswordResetTokens.
   */
  data: Prisma.PasswordResetTokenCreateManyInput | Prisma.PasswordResetTokenCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PasswordResetToken createManyAndReturn
 */
export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * The data used to create many PasswordResetTokens.
   */
  data: Prisma.PasswordResetTokenCreateManyInput | Prisma.PasswordResetTokenCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PasswordResetToken update
 */
export type PasswordResetTokenUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * The data needed to update a PasswordResetToken.
   */
  data: Prisma.XOR<Prisma.PasswordResetTokenUpdateInput, Prisma.PasswordResetTokenUncheckedUpdateInput>
  /**
   * Choose, which PasswordResetToken to update.
   */
  where: Prisma.PasswordResetTokenWhereUniqueInput
}

/**
 * PasswordResetToken updateMany
 */
export type PasswordResetTokenUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PasswordResetTokens.
   */
  data: Prisma.XOR<Prisma.PasswordResetTokenUpdateManyMutationInput, Prisma.PasswordResetTokenUncheckedUpdateManyInput>
  /**
   * Filter which PasswordResetTokens to update
   */
  where?: Prisma.PasswordResetTokenWhereInput
  /**
   * Limit how many PasswordResetTokens to update.
   */
  limit?: number
}

/**
 * PasswordResetToken updateManyAndReturn
 */
export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * The data used to update PasswordResetTokens.
   */
  data: Prisma.XOR<Prisma.PasswordResetTokenUpdateManyMutationInput, Prisma.PasswordResetTokenUncheckedUpdateManyInput>
  /**
   * Filter which PasswordResetTokens to update
   */
  where?: Prisma.PasswordResetTokenWhereInput
  /**
   * Limit how many PasswordResetTokens to update.
   */
  limit?: number
}

/**
 * PasswordResetToken upsert
 */
export type PasswordResetTokenUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * The filter to search for the PasswordResetToken to update in case it exists.
   */
  where: Prisma.PasswordResetTokenWhereUniqueInput
  /**
   * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
   */
  create: Prisma.XOR<Prisma.PasswordResetTokenCreateInput, Prisma.PasswordResetTokenUncheckedCreateInput>
  /**
   * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PasswordResetTokenUpdateInput, Prisma.PasswordResetTokenUncheckedUpdateInput>
}

/**
 * PasswordResetToken delete
 */
export type PasswordResetTokenDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
  /**
   * Filter which PasswordResetToken to delete.
   */
  where: Prisma.PasswordResetTokenWhereUniqueInput
}

/**
 * PasswordResetToken deleteMany
 */
export type PasswordResetTokenDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PasswordResetTokens to delete
   */
  where?: Prisma.PasswordResetTokenWhereInput
  /**
   * Limit how many PasswordResetTokens to delete.
   */
  limit?: number
}

/**
 * PasswordResetToken without action
 */
export type PasswordResetTokenDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetToken
   */
  select?: Prisma.PasswordResetTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetToken
   */
  omit?: Prisma.PasswordResetTokenOmit<ExtArgs> | null
}
