
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Newsletter` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Newsletter
 * 
 */
export type NewsletterModel = runtime.Types.Result.DefaultSelection<Prisma.$NewsletterPayload>

export type AggregateNewsletter = {
  _count: NewsletterCountAggregateOutputType | null
  _min: NewsletterMinAggregateOutputType | null
  _max: NewsletterMaxAggregateOutputType | null
}

export type NewsletterMinAggregateOutputType = {
  id: string | null
  email: string | null
  createdAt: Date | null
}

export type NewsletterMaxAggregateOutputType = {
  id: string | null
  email: string | null
  createdAt: Date | null
}

export type NewsletterCountAggregateOutputType = {
  id: number
  email: number
  createdAt: number
  _all: number
}


export type NewsletterMinAggregateInputType = {
  id?: true
  email?: true
  createdAt?: true
}

export type NewsletterMaxAggregateInputType = {
  id?: true
  email?: true
  createdAt?: true
}

export type NewsletterCountAggregateInputType = {
  id?: true
  email?: true
  createdAt?: true
  _all?: true
}

export type NewsletterAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Newsletter to aggregate.
   */
  where?: Prisma.NewsletterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Newsletters to fetch.
   */
  orderBy?: Prisma.NewsletterOrderByWithRelationInput | Prisma.NewsletterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NewsletterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Newsletters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Newsletters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Newsletters
  **/
  _count?: true | NewsletterCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NewsletterMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NewsletterMaxAggregateInputType
}

export type GetNewsletterAggregateType<T extends NewsletterAggregateArgs> = {
      [P in keyof T & keyof AggregateNewsletter]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNewsletter[P]>
    : Prisma.GetScalarType<T[P], AggregateNewsletter[P]>
}




export type NewsletterGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NewsletterWhereInput
  orderBy?: Prisma.NewsletterOrderByWithAggregationInput | Prisma.NewsletterOrderByWithAggregationInput[]
  by: Prisma.NewsletterScalarFieldEnum[] | Prisma.NewsletterScalarFieldEnum
  having?: Prisma.NewsletterScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NewsletterCountAggregateInputType | true
  _min?: NewsletterMinAggregateInputType
  _max?: NewsletterMaxAggregateInputType
}

export type NewsletterGroupByOutputType = {
  id: string
  email: string
  createdAt: Date
  _count: NewsletterCountAggregateOutputType | null
  _min: NewsletterMinAggregateOutputType | null
  _max: NewsletterMaxAggregateOutputType | null
}

type GetNewsletterGroupByPayload<T extends NewsletterGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NewsletterGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NewsletterGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NewsletterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NewsletterGroupByOutputType[P]>
      }
    >
  >



export type NewsletterWhereInput = {
  AND?: Prisma.NewsletterWhereInput | Prisma.NewsletterWhereInput[]
  OR?: Prisma.NewsletterWhereInput[]
  NOT?: Prisma.NewsletterWhereInput | Prisma.NewsletterWhereInput[]
  id?: Prisma.StringFilter<"Newsletter"> | string
  email?: Prisma.StringFilter<"Newsletter"> | string
  createdAt?: Prisma.DateTimeFilter<"Newsletter"> | Date | string
}

export type NewsletterOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type NewsletterWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.NewsletterWhereInput | Prisma.NewsletterWhereInput[]
  OR?: Prisma.NewsletterWhereInput[]
  NOT?: Prisma.NewsletterWhereInput | Prisma.NewsletterWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Newsletter"> | Date | string
}, "id" | "email">

export type NewsletterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.NewsletterCountOrderByAggregateInput
  _max?: Prisma.NewsletterMaxOrderByAggregateInput
  _min?: Prisma.NewsletterMinOrderByAggregateInput
}

export type NewsletterScalarWhereWithAggregatesInput = {
  AND?: Prisma.NewsletterScalarWhereWithAggregatesInput | Prisma.NewsletterScalarWhereWithAggregatesInput[]
  OR?: Prisma.NewsletterScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NewsletterScalarWhereWithAggregatesInput | Prisma.NewsletterScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Newsletter"> | string
  email?: Prisma.StringWithAggregatesFilter<"Newsletter"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Newsletter"> | Date | string
}

export type NewsletterCreateInput = {
  id?: string
  email: string
  createdAt?: Date | string
}

export type NewsletterUncheckedCreateInput = {
  id?: string
  email: string
  createdAt?: Date | string
}

export type NewsletterUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NewsletterUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NewsletterCreateManyInput = {
  id?: string
  email: string
  createdAt?: Date | string
}

export type NewsletterUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NewsletterUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NewsletterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type NewsletterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type NewsletterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type NewsletterSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["newsletter"]>

export type NewsletterSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["newsletter"]>

export type NewsletterSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["newsletter"]>

export type NewsletterSelectScalar = {
  id?: boolean
  email?: boolean
  createdAt?: boolean
}

export type NewsletterOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "createdAt", ExtArgs["result"]["newsletter"]>

export type $NewsletterPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Newsletter"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    email: string
    createdAt: Date
  }, ExtArgs["result"]["newsletter"]>
  composites: {}
}

export type NewsletterGetPayload<S extends boolean | null | undefined | NewsletterDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NewsletterPayload, S>

export type NewsletterCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NewsletterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NewsletterCountAggregateInputType | true
  }

export interface NewsletterDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Newsletter'], meta: { name: 'Newsletter' } }
  /**
   * Find zero or one Newsletter that matches the filter.
   * @param {NewsletterFindUniqueArgs} args - Arguments to find a Newsletter
   * @example
   * // Get one Newsletter
   * const newsletter = await prisma.newsletter.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NewsletterFindUniqueArgs>(args: Prisma.SelectSubset<T, NewsletterFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Newsletter that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NewsletterFindUniqueOrThrowArgs} args - Arguments to find a Newsletter
   * @example
   * // Get one Newsletter
   * const newsletter = await prisma.newsletter.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NewsletterFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NewsletterFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Newsletter that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsletterFindFirstArgs} args - Arguments to find a Newsletter
   * @example
   * // Get one Newsletter
   * const newsletter = await prisma.newsletter.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NewsletterFindFirstArgs>(args?: Prisma.SelectSubset<T, NewsletterFindFirstArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Newsletter that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsletterFindFirstOrThrowArgs} args - Arguments to find a Newsletter
   * @example
   * // Get one Newsletter
   * const newsletter = await prisma.newsletter.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NewsletterFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NewsletterFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Newsletters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsletterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Newsletters
   * const newsletters = await prisma.newsletter.findMany()
   * 
   * // Get first 10 Newsletters
   * const newsletters = await prisma.newsletter.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const newsletterWithIdOnly = await prisma.newsletter.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NewsletterFindManyArgs>(args?: Prisma.SelectSubset<T, NewsletterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Newsletter.
   * @param {NewsletterCreateArgs} args - Arguments to create a Newsletter.
   * @example
   * // Create one Newsletter
   * const Newsletter = await prisma.newsletter.create({
   *   data: {
   *     // ... data to create a Newsletter
   *   }
   * })
   * 
   */
  create<T extends NewsletterCreateArgs>(args: Prisma.SelectSubset<T, NewsletterCreateArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Newsletters.
   * @param {NewsletterCreateManyArgs} args - Arguments to create many Newsletters.
   * @example
   * // Create many Newsletters
   * const newsletter = await prisma.newsletter.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NewsletterCreateManyArgs>(args?: Prisma.SelectSubset<T, NewsletterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Newsletters and returns the data saved in the database.
   * @param {NewsletterCreateManyAndReturnArgs} args - Arguments to create many Newsletters.
   * @example
   * // Create many Newsletters
   * const newsletter = await prisma.newsletter.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Newsletters and only return the `id`
   * const newsletterWithIdOnly = await prisma.newsletter.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends NewsletterCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, NewsletterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Newsletter.
   * @param {NewsletterDeleteArgs} args - Arguments to delete one Newsletter.
   * @example
   * // Delete one Newsletter
   * const Newsletter = await prisma.newsletter.delete({
   *   where: {
   *     // ... filter to delete one Newsletter
   *   }
   * })
   * 
   */
  delete<T extends NewsletterDeleteArgs>(args: Prisma.SelectSubset<T, NewsletterDeleteArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Newsletter.
   * @param {NewsletterUpdateArgs} args - Arguments to update one Newsletter.
   * @example
   * // Update one Newsletter
   * const newsletter = await prisma.newsletter.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NewsletterUpdateArgs>(args: Prisma.SelectSubset<T, NewsletterUpdateArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Newsletters.
   * @param {NewsletterDeleteManyArgs} args - Arguments to filter Newsletters to delete.
   * @example
   * // Delete a few Newsletters
   * const { count } = await prisma.newsletter.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NewsletterDeleteManyArgs>(args?: Prisma.SelectSubset<T, NewsletterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Newsletters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsletterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Newsletters
   * const newsletter = await prisma.newsletter.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NewsletterUpdateManyArgs>(args: Prisma.SelectSubset<T, NewsletterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Newsletters and returns the data updated in the database.
   * @param {NewsletterUpdateManyAndReturnArgs} args - Arguments to update many Newsletters.
   * @example
   * // Update many Newsletters
   * const newsletter = await prisma.newsletter.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Newsletters and only return the `id`
   * const newsletterWithIdOnly = await prisma.newsletter.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends NewsletterUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, NewsletterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Newsletter.
   * @param {NewsletterUpsertArgs} args - Arguments to update or create a Newsletter.
   * @example
   * // Update or create a Newsletter
   * const newsletter = await prisma.newsletter.upsert({
   *   create: {
   *     // ... data to create a Newsletter
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Newsletter we want to update
   *   }
   * })
   */
  upsert<T extends NewsletterUpsertArgs>(args: Prisma.SelectSubset<T, NewsletterUpsertArgs<ExtArgs>>): Prisma.Prisma__NewsletterClient<runtime.Types.Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Newsletters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsletterCountArgs} args - Arguments to filter Newsletters to count.
   * @example
   * // Count the number of Newsletters
   * const count = await prisma.newsletter.count({
   *   where: {
   *     // ... the filter for the Newsletters we want to count
   *   }
   * })
  **/
  count<T extends NewsletterCountArgs>(
    args?: Prisma.Subset<T, NewsletterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NewsletterCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Newsletter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsletterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NewsletterAggregateArgs>(args: Prisma.Subset<T, NewsletterAggregateArgs>): Prisma.PrismaPromise<GetNewsletterAggregateType<T>>

  /**
   * Group by Newsletter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsletterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NewsletterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NewsletterGroupByArgs['orderBy'] }
      : { orderBy?: NewsletterGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NewsletterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsletterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Newsletter model
 */
readonly fields: NewsletterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Newsletter.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NewsletterClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Newsletter model
 */
export interface NewsletterFieldRefs {
  readonly id: Prisma.FieldRef<"Newsletter", 'String'>
  readonly email: Prisma.FieldRef<"Newsletter", 'String'>
  readonly createdAt: Prisma.FieldRef<"Newsletter", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Newsletter findUnique
 */
export type NewsletterFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * Filter, which Newsletter to fetch.
   */
  where: Prisma.NewsletterWhereUniqueInput
}

/**
 * Newsletter findUniqueOrThrow
 */
export type NewsletterFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * Filter, which Newsletter to fetch.
   */
  where: Prisma.NewsletterWhereUniqueInput
}

/**
 * Newsletter findFirst
 */
export type NewsletterFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * Filter, which Newsletter to fetch.
   */
  where?: Prisma.NewsletterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Newsletters to fetch.
   */
  orderBy?: Prisma.NewsletterOrderByWithRelationInput | Prisma.NewsletterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Newsletters.
   */
  cursor?: Prisma.NewsletterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Newsletters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Newsletters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Newsletters.
   */
  distinct?: Prisma.NewsletterScalarFieldEnum | Prisma.NewsletterScalarFieldEnum[]
}

/**
 * Newsletter findFirstOrThrow
 */
export type NewsletterFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * Filter, which Newsletter to fetch.
   */
  where?: Prisma.NewsletterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Newsletters to fetch.
   */
  orderBy?: Prisma.NewsletterOrderByWithRelationInput | Prisma.NewsletterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Newsletters.
   */
  cursor?: Prisma.NewsletterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Newsletters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Newsletters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Newsletters.
   */
  distinct?: Prisma.NewsletterScalarFieldEnum | Prisma.NewsletterScalarFieldEnum[]
}

/**
 * Newsletter findMany
 */
export type NewsletterFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * Filter, which Newsletters to fetch.
   */
  where?: Prisma.NewsletterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Newsletters to fetch.
   */
  orderBy?: Prisma.NewsletterOrderByWithRelationInput | Prisma.NewsletterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Newsletters.
   */
  cursor?: Prisma.NewsletterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Newsletters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Newsletters.
   */
  skip?: number
  distinct?: Prisma.NewsletterScalarFieldEnum | Prisma.NewsletterScalarFieldEnum[]
}

/**
 * Newsletter create
 */
export type NewsletterCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * The data needed to create a Newsletter.
   */
  data: Prisma.XOR<Prisma.NewsletterCreateInput, Prisma.NewsletterUncheckedCreateInput>
}

/**
 * Newsletter createMany
 */
export type NewsletterCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Newsletters.
   */
  data: Prisma.NewsletterCreateManyInput | Prisma.NewsletterCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Newsletter createManyAndReturn
 */
export type NewsletterCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * The data used to create many Newsletters.
   */
  data: Prisma.NewsletterCreateManyInput | Prisma.NewsletterCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Newsletter update
 */
export type NewsletterUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * The data needed to update a Newsletter.
   */
  data: Prisma.XOR<Prisma.NewsletterUpdateInput, Prisma.NewsletterUncheckedUpdateInput>
  /**
   * Choose, which Newsletter to update.
   */
  where: Prisma.NewsletterWhereUniqueInput
}

/**
 * Newsletter updateMany
 */
export type NewsletterUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Newsletters.
   */
  data: Prisma.XOR<Prisma.NewsletterUpdateManyMutationInput, Prisma.NewsletterUncheckedUpdateManyInput>
  /**
   * Filter which Newsletters to update
   */
  where?: Prisma.NewsletterWhereInput
  /**
   * Limit how many Newsletters to update.
   */
  limit?: number
}

/**
 * Newsletter updateManyAndReturn
 */
export type NewsletterUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * The data used to update Newsletters.
   */
  data: Prisma.XOR<Prisma.NewsletterUpdateManyMutationInput, Prisma.NewsletterUncheckedUpdateManyInput>
  /**
   * Filter which Newsletters to update
   */
  where?: Prisma.NewsletterWhereInput
  /**
   * Limit how many Newsletters to update.
   */
  limit?: number
}

/**
 * Newsletter upsert
 */
export type NewsletterUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * The filter to search for the Newsletter to update in case it exists.
   */
  where: Prisma.NewsletterWhereUniqueInput
  /**
   * In case the Newsletter found by the `where` argument doesn't exist, create a new Newsletter with this data.
   */
  create: Prisma.XOR<Prisma.NewsletterCreateInput, Prisma.NewsletterUncheckedCreateInput>
  /**
   * In case the Newsletter was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NewsletterUpdateInput, Prisma.NewsletterUncheckedUpdateInput>
}

/**
 * Newsletter delete
 */
export type NewsletterDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
  /**
   * Filter which Newsletter to delete.
   */
  where: Prisma.NewsletterWhereUniqueInput
}

/**
 * Newsletter deleteMany
 */
export type NewsletterDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Newsletters to delete
   */
  where?: Prisma.NewsletterWhereInput
  /**
   * Limit how many Newsletters to delete.
   */
  limit?: number
}

/**
 * Newsletter without action
 */
export type NewsletterDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Newsletter
   */
  select?: Prisma.NewsletterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Newsletter
   */
  omit?: Prisma.NewsletterOmit<ExtArgs> | null
}
